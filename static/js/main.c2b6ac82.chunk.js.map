{"version":3,"sources":["InputData.js","components/Form.js","components/PracticalForm.js","components/EducationalForm.js","components/Section.js","components/Exp.js","components/Header.js","components/ModeController.js","components/SoloInput.js","components/DisplayField.js","App.js","reportWebVitals.js","index.js"],"names":["InputData","title","type","description","Form","props","className","onSubmit","handleSubmit","children","onClick","toggleDisplay","initialState","company","position","mainTask","jobStart","formatISO","Date","representation","jobEnd","WorkForm","useState","state","setState","handleChange","event","target","name","value","prevField","inputs","filter","input","list","includes","map","htmlFor","id","onChange","preventDefault","addItem","uniqid","university","major","studyStart","format","studyEnd","SchoolForm","Section","toUpperCase","Exp","icons","removeWorkList","isInEditMode","element","icon","faPaperPlane","size","Header","ModeController","inInEditMode","editClass","previewClass","handleClick","button","setIsInEditMode","SoloInput","data","autoFocus","tabIndex","onKeyPress","key","onBlur","DisplayField","display","fieldName","onFocus","workList","schoolList","mainList","App","setSchoolList","setWorkList","isEditingWorkExp","setIsEditingWorkExp","isEditingSchoolExp","setIsEditingSchoolExp","firstName","lastName","email","phoneNumber","mainFields","setMainFields","isEditing","setIsEditing","toggleMainFieldsView","field","prevIsEditing","render","forEach","item","e","newValue","prev","practialForm","PracticalForm","newItem","prevList","workExpDiv","workItem","exp","schoolForm","schoolExpList","removeItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2b6ac82.chunk.js","sourcesContent":["const InputData = [\n  {\n    title: \"firstName\",\n    type: \"text\",\n    description: \"Name\",\n  },\n  {\n    title: \"lastName\",\n    type: \"text\",\n    description: \"Name\",\n  },\n  {\n    title: \"email\",\n    type: \"email\",\n    description: \"Email\",\n  },\n  {\n    title: \"phoneNumber\",\n    type: \"phone\",\n    description: \"Phone\",\n  },\n  {\n    title: \"university\",\n    type: \"text\",\n    description: \"School name\",\n  },\n  {\n    title: \"major\",\n    type: \"text\",\n    description: \"Major\",\n  },\n  {\n    title: \"studyStart\",\n    type: \"number\",\n    description: \"Start year of study\",\n  },\n  {\n    title: \"studyEnd\",\n    type: \"number\",\n    description: \"End year of study\",\n  },\n  {\n    title: \"company\",\n    type: \"text\",\n    description: \"Company name\",\n  },\n  {\n    title: \"position\",\n    type: \"text\",\n    description: \"Position\",\n  },\n  {\n    title: \"mainTask\",\n    type: \"text\",\n    description: \"Main Task of Job\",\n  },\n  {\n    title: \"jobStart\",\n    type: \"date\",\n    description: \"Start Date of Job\",\n  },\n  {\n    title: \"jobEnd\",\n    type: \"date\",\n    description: \"End Date of Job\",\n  },\n];\n\nexport default InputData;\n","import \"./Form.scss\";\n\nexport default function Form(props) {\n  return (\n    <form className=\"form\" onSubmit={props.handleSubmit}>\n      {props.children}\n      <button type=\"submit\" className=\"button\">\n        Add\n      </button>\n      <button type=\"button\" onClick={props.toggleDisplay} className=\"button\">\n        Cancel\n      </button>\n    </form>\n  );\n}\n","import { useState } from \"react\";\nimport uniqid from \"uniqid\";\n\nimport InputData from \"../InputData\";\nimport { formatISO } from \"date-fns\";\nimport { workList as list } from \"../App\";\nimport Form from \"./Form\";\n\nconst initialState = {\n  company: \"\",\n  position: \"\",\n  mainTask: \"\",\n  jobStart: formatISO(new Date(), { representation: \"date\" }),\n  jobEnd: formatISO(new Date(), { representation: \"date\" }),\n};\n\nfunction WorkForm(props) {\n  const [state, setState] = useState(initialState);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setState((prevField) => ({ ...prevField, [name]: value }));\n  };\n\n  const clearState = () => {\n    setState(initialState);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.addItem({ ...state, id: uniqid() });\n    clearState();\n  };\n\n  const inputs = InputData.filter((input) => list.includes(input.title)).map(\n    (input) => {\n      return (\n        <div key={input.title} className=\"inputContainer\">\n          <label htmlFor={input.title} className=\"label\">\n            {input.description}\n          </label>\n          <input\n            id={input.title}\n            type={input.type}\n            name={input.title}\n            value={state[input.title]}\n            onChange={handleChange}\n          />\n        </div>\n      );\n    }\n  );\n  return (\n    <Form handleSubmit={handleSubmit} toggleDisplay={props.toggleDisplay}>\n      {inputs}\n    </Form>\n  );\n}\n\nexport default WorkForm;\n","import { useState } from \"react\";\nimport uniqid from \"uniqid\";\n\nimport InputData from \"../InputData\";\nimport { format } from \"date-fns\";\nimport { schoolList as list } from \"../App\";\nimport Form from \"./Form\";\n\nconst initialState = {\n  university: \"\",\n  major: \"\",\n  studyStart: format(new Date(), \"yyyy\"),\n  studyEnd: format(new Date(), \"yyyy\"),\n};\n\nfunction SchoolForm(props) {\n  const [state, setState] = useState(initialState);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setState((prevField) => ({ ...prevField, [name]: value }));\n  };\n\n  const clearState = () => {\n    setState(initialState);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.addItem({ ...state, id: uniqid() });\n    clearState();\n  };\n\n  const inputs = InputData.filter((input) => list.includes(input.title)).map(\n    (input) => {\n      return (\n        <div key={input.title} className=\"inputContainer\">\n          <label htmlFor={input.title} className=\"label\">\n            {input.description}\n          </label>\n          <input\n            id={input.title}\n            type={input.type}\n            name={input.title}\n            value={state[input.title]}\n            onChange={handleChange}\n          />\n        </div>\n      );\n    }\n  );\n  return (\n    <Form handleSubmit={handleSubmit} toggleDisplay={props.toggleDisplay}>\n      {inputs}\n    </Form>\n  );\n}\n\nexport default SchoolForm;\n","import \"./Section.scss\";\n\nfunction Section(props) {\n  return (\n    <section className=\"section\">\n      <h2 className=\"section_title\">{props.title.toUpperCase()}</h2>\n      {props.children}\n    </section>\n  );\n}\n\nexport default Section;\n","import \"./Exp.scss\";\n\nexport default function Exp(props) {\n  const handleClick = () => {\n    props.removeWorkList();\n  };\n\n  const icons = (\n    <div className=\"iconCtn\">\n      <button className=\"iconBtn\">\n        <span className=\"material-icons\" onClick={handleClick}>\n          delete\n        </span>\n      </button>\n    </div>\n  );\n  return (\n    <div className=\"Exp\">\n      <div className=\"Exp-left\">{props.children}</div>\n      {props.isInEditMode && icons}\n    </div>\n  );\n}\n","import \"./Header.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\nconst element = <FontAwesomeIcon icon={faPaperPlane} size=\"6x\" />;\n\nfunction Header(props) {\n  return (\n    <div className=\"Header\">\n      {element}\n      <h1>CV Builder App</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import \"./ModeController.scss\";\n\nexport default function ModeController(props) {\n  const inInEditMode = props.isInEditMode;\n  const editClass = inInEditMode ? \" active\" : \"\";\n  const previewClass = inInEditMode ? \"\" : \" active\";\n\n  const handleClick = (button) => {\n    if (button === \"preview\" && inInEditMode) {\n      props.setIsInEditMode(false);\n    } else if (button === \"edit\" && !inInEditMode) {\n      props.setIsInEditMode(true);\n    }\n  };\n\n  return (\n    <div className=\"ModeController\">\n      <button\n        className={\"button edit\" + editClass}\n        onClick={() => handleClick(\"edit\")}\n      >\n        Edit Mode\n      </button>\n      <button\n        className={\"button preview\" + previewClass}\n        onClick={() => handleClick(\"preview\")}\n      >\n        Preview Mode\n      </button>\n    </div>\n  );\n}\n","export default function SoloInput(props) {\n  const handleKeyPress = (event) => {\n    const key = event.key;\n    if (key === \"Enter\") {\n      props.toggleDisplay();\n    }\n  };\n\n  const { type, title } = props.data;\n\n  return (\n    <input\n      autoFocus={true}\n      tabIndex=\"0\"\n      type={type}\n      name={title}\n      value={props.value}\n      onChange={props.handleChange}\n      onKeyPress={handleKeyPress}\n      onBlur={() => props.toggleDisplay()}\n    ></input>\n  );\n}\n","import \"./DisplayField.scss\";\n\nexport default function DisplayField(props) {\n  const handleFocus = () => {\n    if (props.isInEditMode) {\n      props.toggleDisplay();\n    }\n  };\n  let display;\n  let className = \"\";\n  if (props.fieldName === \"firstName\" || props.fieldName === \"lastName\") {\n    display = <h3 className=\"field_title\">{props.value}</h3>;\n    className += \" main\";\n  } else {\n    display = <p className=\"field_title\">{props.value}</p>;\n    className += \" sub\";\n  }\n\n  return (\n    <div\n      tabIndex=\"0\"\n      onFocus={handleFocus}\n      className={\"DisplayField\" + className}\n    >\n      {display}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport PracticalForm from \"./components/PracticalForm\";\nimport SchoolForm from \"./components/EducationalForm\";\nimport \"./App.scss\";\nimport \"modern-normalize/modern-normalize.css\";\nimport Section from \"./components/Section\";\nimport Exp from \"./components/Exp\";\nimport Header from \"./components/Header\";\nimport ModeController from \"./components/ModeController\";\nimport SoloInput from \"./components/SoloInput\";\nimport InputData from \"./InputData\";\nimport DisplayField from \"./components/DisplayField\";\n\n// import EducationalForm from \"./components/EducationalForm\";\nconst workList = [\"company\", \"position\", \"mainTask\", \"jobStart\", \"jobEnd\"];\nconst schoolList = [\"university\", \"major\", \"studyStart\", \"studyEnd\"];\nconst mainList = [\"firstName\", \"lastName\", \"email\", \"phoneNumber\"];\n\nfunction App() {\n  const [schoolList, setSchoolList] = useState([]);\n  const [workList, setWorkList] = useState([]);\n  const [isEditingWorkExp, setIsEditingWorkExp] = useState(false);\n  const [isEditingSchoolExp, setIsEditingSchoolExp] = useState(false);\n  const [isInEditMode, setIsInEditMode] = useState(true);\n\n  const [mainFields, setMainFields] = useState({\n    firstName: \"First Name\",\n    lastName: \"Last Name\",\n    email: \"Email\",\n    phoneNumber: \"Phone\",\n  });\n\n  const [isEditing, setIsEditing] = useState({\n    firstName: false,\n    lastName: false,\n    email: false,\n    phoneNumber: false,\n  });\n\n  const toggleMainFieldsView = (field) => {\n    setIsEditing((prevIsEditing) => {\n      return { ...prevIsEditing, [field]: !prevIsEditing[field] };\n    });\n  };\n\n  const changeMainState = (field, newValue) => {\n    setMainFields((prev) => {\n      return { ...prev, [field]: newValue };\n    });\n  };\n\n  const removeWorkItem = (id) => {\n    setWorkList((prevList) => {\n      const updatedWorkList = prevList.filter((exp) => exp.id !== id);\n      return updatedWorkList;\n    });\n  };\n\n  const removeSchoolItem = (id) => {\n    setSchoolList((prevList) => {\n      const updatedWorkList = prevList.filter((exp) => exp.id !== id);\n      return updatedWorkList;\n    });\n  };\n\n  const getData = (name) => {\n    const dataArr = InputData.filter((item) => {\n      return item.title === name;\n    });\n    return dataArr[0];\n  };\n\n  const render = {};\n  mainList.forEach((item) => {\n    render[item] = isEditing[item] ? (\n      <SoloInput\n        value={mainFields[item]}\n        toggleDisplay={() => toggleMainFieldsView(item)}\n        data={getData(item)}\n        handleChange={(e) => changeMainState(item, e.target.value)}\n      />\n    ) : (\n      <DisplayField\n        toggleDisplay={() => toggleMainFieldsView(item)}\n        fieldName={item}\n        value={mainFields[item]}\n        isInEditMode={isInEditMode}\n      />\n    );\n  });\n\n  const practialForm = isEditingWorkExp ? (\n    <PracticalForm\n      addItem={(newItem) => setWorkList((prevList) => [...prevList, newItem])}\n      toggleDisplay={() => setIsEditingWorkExp(false)}\n    />\n  ) : (\n    <button className=\"button\" onClick={() => setIsEditingWorkExp(true)}>\n      Add\n    </button>\n  );\n  const workExpDiv = workList.map((workItem) => (\n    <Exp\n      key={workItem.id}\n      removeWorkList={() => removeWorkItem(workItem.id)}\n      isInEditMode={isInEditMode}\n    >\n      <span>\n        {workItem.company}, {workItem.position}, {workItem.mainTask}\n      </span>\n      <br />\n      <span>\n        From {workItem.jobStart} to {workItem.jobEnd}\n      </span>\n    </Exp>\n  ));\n  const schoolForm = isEditingSchoolExp ? (\n    <SchoolForm\n      addItem={(newItem) => setSchoolList((prevList) => [...prevList, newItem])}\n      toggleDisplay={() => setIsEditingSchoolExp(false)}\n    />\n  ) : (\n    <button className=\"button\" onClick={() => setIsEditingSchoolExp(true)}>\n      Add\n    </button>\n  );\n  const schoolExpList = schoolList.map((item) => (\n    <Exp key={item.id} removeItem={() => removeSchoolItem(item.id)}>\n      <span>\n        {item.university}, {item.major}\n      </span>\n      <br />\n      <span>\n        From {item.studyStart} to {item.studyEnd}\n      </span>\n    </Exp>\n  ));\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <ModeController\n        setIsInEditMode={setIsInEditMode}\n        isInEditMode={isInEditMode}\n      />\n      <div className=\"AppMain\">\n        <div className=\"Main\">\n          <div className=\"Main_left\">\n            {render.firstName}\n            {render.lastName}\n          </div>\n          <div className=\"Main_right\">\n            <div className=\"subCtn\">\n              <span className=\"material-icons\">email</span>\n              {render.email}\n            </div>\n\n            <div className=\"subCtn\">\n              <span className=\"material-icons\">phone</span>\n              {render.phoneNumber}\n            </div>\n          </div>\n        </div>\n        <Section title=\"Work Experiences\">\n          {workExpDiv}\n          {isInEditMode && practialForm}\n        </Section>\n        <Section title=\"School Experiences\">\n          {schoolExpList}\n          {isInEditMode && schoolForm}\n        </Section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\nexport { workList, schoolList, mainList };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}